import java.util.ArrayList;
import java.util.Random;
import java.util.regex.*;

public class Methods {
	
	//Picker
	//Number duel
	//In/Out of raids

	//randomizer
	private Random rnd = new Random();
	
	//vars for !Duel
	private String duelWinningName;
	private int duelWinningNum;
	private int duelNum;
	private final int duelNumMax = 100;
	
	//Name lists for raid participants
	private ArrayList<String> WotM_NM;
	private ArrayList<String> WotM_HM;
	private ArrayList<String> VoG_NM;
	private ArrayList<String> VoG_HM;
	private ArrayList<String> KF_HM;
	private ArrayList<String> KF_NM;
	private ArrayList<String> C_HM;
	private ArrayList<String> C_NM;
	
	
	public Methods() {
		WotM_NM = new ArrayList<String>();
		WotM_HM = new ArrayList<String>();
		VoG_NM = new ArrayList<String>();
		VoG_HM = new ArrayList<String>();
		KF_HM = new ArrayList<String>();
		KF_NM = new ArrayList<String>();
		C_HM = new ArrayList<String>();
		C_NM = new ArrayList<String>();
	}
	//pick n names from a list
	public void pick(int n, ArrayList<String> names) {
		ArrayList<String> out = new ArrayList<String>();
		for(int i=0; i<n; n++) { 			//n times
			int roll = roll(names.size());	//choose a random list element
			out.add(names.get(roll));		//add to out list
			names.remove(roll);				//remove from select list
		}
		print(out);
	}
	
	//add player to raid list for a given raid
	public void in(String raid, String self) {
		if(regexCall("/(vog|(vault|vault of glass)) h/ig",raid))
			WotM_NM.add(self);
		else if(regexCall("",raid))
			WotM_HM.add(self);
		else if(regexCall("",raid))
			VoG_NM.add(self);
		else if(regexCall("",raid))
			VoG_HM.add(self);
		else if(regexCall("",raid))
			KF_NM.add(self);
		else if(regexCall("",raid))
			KF_HM.add(self);
		else if(regexCall("",raid))
			C_NM.add(self);
		else if(regexCall("",raid))
			C_HM.add(self);
		else
			print("Invalid use of !in");
	}
	
	//regex to find if there is a match of "pattern" in "find"
	private boolean regexCall(String pattern, String search) {
		Pattern P = Pattern.compile(pattern);
		Matcher M = P.matcher(search);
		return M.find();
	}
	
	//remove player from raid list for a given raid
	public void out(String raid, String self) {
		if(regexCall("/(vog|(vault|vault of glass)) h/ig",raid))
			WotM_NM.remove(self);
		else if(regexCall("",raid))
			WotM_HM.remove(self);
		else if(regexCall("",raid))
			VoG_NM.remove(self);
		else if(regexCall("",raid))
			VoG_HM.remove(self);
		else if(regexCall("",raid))
			KF_NM.remove(self);
		else if(regexCall("",raid))
			KF_HM.remove(self);
		else if(regexCall("",raid))
			C_NM.remove(self);
		else if(regexCall("",raid))
			C_HM.remove(self);
		else
			print("Invalid use of !out");
	}
	
	//print current participants for a given raid
	public void letsGo(String raid) {
		if(regexCall("/(vog|(vault|vault of glass)) h/ig",raid))
			letsGoPrint(WotM_NM);
		else if(regexCall("",raid))
			letsGoPrint(WotM_HM);
		else if(regexCall("",raid))
			letsGoPrint(VoG_NM);
		else if(regexCall("",raid))
			letsGoPrint(VoG_HM);
		else if(regexCall("",raid))
			letsGoPrint(KF_NM);
		else if(regexCall("",raid))
			letsGoPrint(KF_HM);
		else if(regexCall("",raid))
			letsGoPrint(C_NM);
		else if(regexCall("",raid))
			letsGoPrint(C_HM);
	}
	
	//subcall of letsGo
	private void letsGoPrint(ArrayList<String> list) {
		if(list.size() > 6)
            pick(6, list);
        else if(list.size() < 6)
            print(list, "+" + (6-list.size()));
        else
            print(list);
	}
	
	//participate in a number guessing
	public void duel(String name, int num) {
		if(duelNum==0) {
			duelNum=roll(duelNumMax);
			print("New Duel");
		}
		else {
			if(differance(num,duelNum) < differance(duelWinningNum,duelNum))
			duelWinningNum = num;
			duelWinningName = name;
		}
	}
	
	//print who win the current duel, and reset
	public void whoWon() {
		print(""+duelWinningName+" wins with "+duelWinningNum+". The number was "+duelNum+".");
		duelNum=0;
	}
	
	//find absolute value of the difference of two numbers
	private int differance(int a, int b) {
		return Math.abs(a-b);
	}
	
	//print methods
	private void print(String[] out) {
	
		for(int i=0; i<out.length; i++)
			System.out.println(out[i]);
	}
	private void print(ArrayList<String> out) {
		
		for(String s: out)
			System.out.println(s);
	}
	private void print(String out) {
		
		System.out.println(out);
	}
	private void print(ArrayList<String> out1, String out2) {
		print(out1);
		print(out2);
	}
	
	//roll a number from 1 to max
	private int roll(int max) {
		return roll(1,max);
	}
	//roll a number from min to max
	private int roll(int min, int max) {
		return min+Math.abs(rnd.nextInt())%(max+1-min);
	}
}
